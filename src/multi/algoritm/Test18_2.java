package multi.algoritm;

public class Test18_2 {

	public static void main(String[] args) {
		long startTime = System.currentTimeMillis();
		// 다음과 같이 삼각형 모양으로 숫자를 배열했습니다.
		// 3
		// 7 4
		// 2 4 6
		// 8 5 9 3
		// 삼각형의 꼭대기부터 아래쪽으로 인접한 숫자를 찾아 내려가면서
		// 합을 구하면, 위의 그림처럼 3 + 7 + 4 + 9 = 23 이
		// 가장 큰 합을 갖는 경로가 됩니다.
		// 다음 삼각형에서 합이 최대가 되는 경로를 찾아서 그 합을 구하세요.

		// 75
		// 95 64
		// 17 47 82
		// 18 35 87 10
		// 20 04 82 47 65
		// 19 01 23 75 03 34
		// 88 02 77 73 07 63 67
		// 99 65 04 28 06 16 70 92
		// 41 41 26 56 83 40 80 70 33
		// 41 48 72 33 47 32 37 16 94 29
		// 53 71 44 65 25 43 91 52 97 51 14
		// 70 11 33 28 77 73 17 78 39 68 17 57
		// 91 71 52 38 17 14 91 43 58 50 27 29 48
		// 63 66 04 68 89 53 67 30 73 16 69 87 40 31
		// 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

		// 참고: 여기서는 경로가 16384개밖에 안되기 때문에,
		// 모든 경로의 합을 일일이 계산해서 답을 구하는 것이 가능합니다.
		// 하지만 67번 문제에는 100층짜리 삼각형 배열이 나옵니다.
		// 그런 경우에는 좀 더 현명한 풀이 방법을 찾아야겠지요.

		// 1.작은 삼각 샘플 처리(총경우의 수는 2의 (층수-1)제곱 : 8)
//		 System.out.println("1.총경우의 수:"+Math.pow(2, 4-1));
//		 test01();

		// 2.큰 삼각 실제문제 처리(총경우의 수는 2의 (층수-1)제곱 : 8)
		System.out.println("2.총경우의 수:" + Math.pow(2, 15 - 1));
		test02();

		System.out.println("Time:" + (System.currentTimeMillis() - startTime));
	}

	private static void test02() {
		System.out.println("==========");

		int[][] triangle = { 
				{ 75 }, 
				{ 95, 64 }, 
				{ 17, 47, 82 }, 
				{ 18, 35, 87, 10 }, 
				{ 20, 4, 82, 47, 65 },
				{ 19, 1, 23, 75, 3, 34 }, 
				{ 88, 2, 77, 73, 7, 63, 67 }, { 99, 65, 4, 28, 6, 16, 70, 92 },
				{ 41, 41, 26, 56, 83, 40, 80, 70, 33 }, { 41, 48, 72, 33, 47, 32, 37, 16, 94, 29 },
				{ 53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14 }, { 70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57 },
				{ 91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48 },
				{ 63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31 },
				{ 4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23 } };

		int maxSum = findMaxPathSum(triangle);
		System.out.println("최대 합: " + maxSum);
	}

	private static int findMaxPathSum(int[][] triangle) {
		int height = triangle.length;

		// 삼각형의 맨 아래층부터 위층으로 올라가면서 인접한 수의 합을 계산하고, 
		//최종적으로 맨 꼭대기에 도달했을 때의 최대 합을 반환
		for (int i = height - 2; i >= 0; i--) {
			for (int j = 0; j <= i; j++) {
				triangle[i][j] += Math.max(triangle[i + 1][j], triangle[i + 1][j + 1]);
			}
		}

		// 꼭대기에 도달했을 때의 값이 최대 합
		return triangle[0][0];
	}

}